cmake_minimum_required(VERSION 3.10)
set(CMAKE_SYSTEM_VERSION 10.0.26100.1742)
set(CMAKE_TOOLCHAIN_FILE "D:/Libraries/vcpkg/scripts/buildsystems/vcpkg.cmake" CACHE STRING "Vcpkg toolchain file")

if(NOT DEFINED CMAKE_TOOLCHAIN_FILE)
    set(CMAKE_TOOLCHAIN_FILE "D:/Libraries/vcpkg/scripts/buildsystems/vcpkg.cmake"
        CACHE STRING "Vcpkg toolchain file")
endif()

list(APPEND CMAKE_PREFIX_PATH "D:/Libraries/vcpkg/packages")

list(APPEND CMAKE_PREFIX_PATH 
    "D:/Libraries/vcpkg/installed/x64-windows-static"
    "D:/Libraries/vcpkg/installed/x64-windows-static/share"
)

set(VCPKG_TARGET_TRIPLET "x64-windows-static")




set(nlohmann_json_DIR "D:/Libraries/vcpkg/packages/nlohmann-json_x64-windows/share/nlohmann_json")
set(xtl_DIR "D:/Libraries/vcpkg/packages/xtl_x64-windows/share/xtl")
set(xtensor_DIR "D:/Libraries/vcpkg/packages/xtensor_x64-windows/share/xtensor")

set(ONNXRUNTIME_DIR "D:/C++/onnxruntime-win-x64-gpu-1.17.1")
set(ONNXRUNTIME_INCLUDE_DIRS "${ONNXRUNTIME_DIR}/include")
set(ONNXRUNTIME_LIB_DIR "${ONNXRUNTIME_DIR}/lib")

include(ProcessorCount)
ProcessorCount(N)
if(NOT N EQUAL 0)
    set(CMAKE_BUILD_PARALLEL_LEVEL ${N})
    if(MSVC)
        add_compile_options("/MP${N}")
    endif()
endif()

if(MSVC)
    add_compile_options("/utf-8")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /SUBSYSTEM:WINDOWS /level='requireAdministrator'")
    add_definitions(-DUNICODE -D_UNICODE)
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /O2 /arch:AVX2 /MT")
    set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Release>:>")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /NODEFAULTLIB:MSVCRT")
    add_compile_options(
        $<$<CONFIG:Release>:/MT>
        $<$<CONFIG:Debug>:/MTd>
    )
endif()



set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_AUTOUIC ON)

set(OpenCV_DIR "D:/C++/Opencv/build")
set(OpenCV_LIB_DIR "D:/C++/Opencv/build/x64/vc16/lib")
set(OpenCV_BIN_DIR "D:/C++/Opencv/build/x64/vc16/bin")

find_package(nlohmann_json CONFIG REQUIRED)
find_package(xtl CONFIG REQUIRED)
find_package(xtensor CONFIG REQUIRED)
find_package(OpenCV REQUIRED)
find_package(Qt5 COMPONENTS Core Widgets Gui Sql Network Concurrent REQUIRED)
find_package(DirectML QUIET)
set(SOURCE_FILES
    src/main.cpp
    src/ControlGUI.cpp
    src/Logger.cpp
    src/ScreenCapture.cpp
    src/LoginGUI.cpp
    src/SystemUtils.cpp
    src/SetLoad.cpp
    src/SecurityUtils.cpp
    src/SecurityTimer.cpp
    src/SecurityProtection.cpp
    src/LanguageManager.cpp
    resources.qrc
)

set(HEADERS
    include/ControlGUI.h
    include/Logger.h
    include/ScreenCapture.h
    include/KeyboardMouseControl.h
    include/LoginGUI.h
    include/SystemUtils.h
    include/SetLoad.h
    include/SecurityUtils.h
    include/SecurityTimer.h
    include/SecurityProtection.h
    include/LanguageManager.h
)

set(WIN32_RESOURCES
    app.rc
)


list(APPEND CMAKE_PREFIX_PATH 
    "D:/Libraries/vcpkg/packages/zstd_x64-windows-static"
    "D:/Libraries/vcpkg/packages/zstd_x64-windows-static/share"
)

set(zstd_DIR "D:/Libraries/vcpkg/packages/zstd_x64-windows-static/share/zstd")

find_package(zstd CONFIG REQUIRED)
message(STATUS "ZSTD found: ${zstd_FOUND}")
message(STATUS "ZSTD version: ${zstd_VERSION}")

set(_VCPKG_INSTALLED_DIR "D:/Libraries/vcpkg/installed")
set(MYSQL_DIR "${_VCPKG_INSTALLED_DIR}/${VCPKG_TARGET_TRIPLET}")
list(APPEND CMAKE_PREFIX_PATH 
    "${MYSQL_DIR}"
    "${MYSQL_DIR}/share"
)


set(MYSQL_DLL_DIR "D:/Libraries/vcpkg/installed/x64-windows/bin")

find_package(unofficial-libmysql REQUIRED)

set(VCPKG_INCLUDE_DIR "D:/Libraries/vcpkg/packages")
include_directories(${VCPKG_INCLUDE_DIR})
include_directories(${OpenCV_INCLUDE_DIRS})
link_directories(${OpenCV_LIB_DIR})


add_executable(${PROJECT_NAME} WIN32 
    ${SOURCE_FILES}
    ${HEADERS}
    ${WIN32_RESOURCES}
)

target_include_directories(${PROJECT_NAME} PRIVATE
    ${CMAKE_SOURCE_DIR}/include
)



target_include_directories(${PROJECT_NAME} PRIVATE
    ${CMAKE_SOURCE_DIR}/include
    ${xtensor_INCLUDE_DIRS}
    ${xtl_INCLUDE_DIRS}
    "D:/C++/readerwriterqueue-master"
)

if(USE_DML)
    target_include_directories(${PROJECT_NAME} PRIVATE
        "D:/C++/Microsoft.ML.OnnxRuntime.DirectML.1.17.1/build/native/include"
    )
else()
    target_include_directories(${PROJECT_NAME} PRIVATE
        ${ONNXRUNTIME_INCLUDE_DIRS}
    )
endif()

target_sources(${PROJECT_NAME} PRIVATE "app.rc")

set_property(TARGET ${PROJECT_NAME} PROPERTY
    MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")

set(CUDA_TOOLKIT_ROOT_DIR "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.8")
set(CUDA_STATIC ON)
set(CUDA_USE_STATIC_CUDA_RUNTIME ON)

set(CUDA_STATIC_LIBS
    "${CUDA_TOOLKIT_ROOT_DIR}/lib/x64/cudart_static.lib"
    "${CUDA_TOOLKIT_ROOT_DIR}/lib/x64/cublas.lib"
    "${CUDA_TOOLKIT_ROOT_DIR}/lib/x64/cublasLt.lib"
    "${CUDA_TOOLKIT_ROOT_DIR}/lib/x64/cudnn.lib"
    "${CUDA_TOOLKIT_ROOT_DIR}/lib/x64/cudnn_ops_train.lib"
    "${CUDA_TOOLKIT_ROOT_DIR}/lib/x64/cudnn_ops_infer.lib"
    "${CUDA_TOOLKIT_ROOT_DIR}/lib/x64/cudnn_adv_train.lib"
    "${CUDA_TOOLKIT_ROOT_DIR}/lib/x64/cudnn_adv_infer.lib"
    "${CUDA_TOOLKIT_ROOT_DIR}/lib/x64/cudnn_cnn_train.lib"
    "${CUDA_TOOLKIT_ROOT_DIR}/lib/x64/cudnn_cnn_infer.lib"
)


include_directories(
    ${CUDA_TOOLKIT_ROOT_DIR}/include
)


set(DIRECTML_SDK_DIR "D:/C++/DirectMLSDK")
set(DIRECTML_INCLUDE_DIR "${DIRECTML_SDK_DIR}/include")
set(DIRECTML_LIB_DIR "${DIRECTML_SDK_DIR}/bin/x64-win")
set(DIRECTML_BIN_DIR "${DIRECTML_SDK_DIR}/bin/x64-win")


if(NOT EXISTS "${DIRECTML_INCLUDE_DIR}/DirectML.h")
    message(WARNING "DirectML.h not found in ${DIRECTML_INCLUDE_DIR}")
endif()

if(NOT EXISTS "${DIRECTML_LIB_DIR}/DirectML.lib")
    message(WARNING "DirectML.lib not found in ${DIRECTML_LIB_DIR}")
endif()

if(NOT EXISTS "${DIRECTML_BIN_DIR}/DirectML.dll")
    message(WARNING "DirectML.dll not found in ${DIRECTML_BIN_DIR}")
endif()

include_directories(${DIRECTML_INCLUDE_DIR})

target_link_libraries(${PROJECT_NAME} PRIVATE
    ${OpenCV_LIBS}
    d3d11
    dxgi
    comctl32
    "${DIRECTML_LIB_DIR}/DirectML.lib"
    ${ONNXRUNTIME_LIB_DIR}/onnxruntime.lib
    ${ONNXRUNTIME_LIB_DIR}/onnxruntime_providers_shared.lib
    ${ONNXRUNTIME_LIB_DIR}/onnxruntime_providers_cuda.lib
    ${ONNXRUNTIME_LIB_DIR}/onnxruntime_providers_tensorrt.lib
    ${CUDA_STATIC_LIBS}
    xtensor
    xtl
    nlohmann_json::nlohmann_json
    Qt5::Core
    Qt5::Widgets
    Qt5::Gui
    Qt5::Sql
    Qt5::Network
    WindowsApp.lib
    zstd::libzstd
    unofficial::libmysql::libmysql
    "Ws2_32.lib"
    "Kernel32.lib"
    "User32.lib"
    "Gdi32.lib"
    "Winspool.lib"
    "Shell32.lib"
    "Ole32.lib"
    "Oleaut32.lib"
    "Uuid.lib"
    "Comdlg32.lib"
    "Advapi32.lib"
    "Shell32.lib"
    "wbemuuid.lib"
)

set_target_properties(${PROJECT_NAME} PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_BINARY_DIR}/Release
)

add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_if_different
        "${OpenCV_BIN_DIR}/opencv_world4100.dll"
        "${OpenCV_BIN_DIR}/opencv_videoio_ffmpeg4100_64.dll"
        "${OpenCV_BIN_DIR}/opencv_videoio_msmf4100_64.dll"
        $<TARGET_FILE_DIR:${PROJECT_NAME}>
)

add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_if_different
        "${ONNXRUNTIME_DIR}/lib/onnxruntime.dll"
        "${ONNXRUNTIME_DIR}/lib/onnxruntime_providers_shared.dll"
        "${ONNXRUNTIME_DIR}/lib/onnxruntime_providers_cuda.dll"
        $<TARGET_FILE_DIR:${PROJECT_NAME}>
)

set(QT_DLL_DIR "D:/Libraries/vcpkg/installed/x64-windows/bin")
set(QT_PLUGIN_DIR "D:/Libraries/vcpkg/installed/x64-windows/plugins")

add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_if_different
        "${QT_DLL_DIR}/Qt5Core.dll"
        "${QT_DLL_DIR}/Qt5Widgets.dll"
        "${QT_DLL_DIR}/Qt5Gui.dll"
        "${QT_DLL_DIR}/Qt5Sql.dll"
        "${QT_DLL_DIR}/Qt5Network.dll"
        $<TARGET_FILE_DIR:${PROJECT_NAME}>
)
add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_if_different
        "${QT_DLL_DIR}/libpng16.dll"
        "${QT_DLL_DIR}/harfbuzz.dll"
        "${QT_DLL_DIR}/double-conversion.dll"
        "${QT_DLL_DIR}/pcre2-16.dll"
        "${QT_DLL_DIR}/zlib1.dll"
        "${QT_DLL_DIR}/zstd.dll"
        "${QT_DLL_DIR}/freetype.dll"
        "${QT_DLL_DIR}/bz2.dll"
        "${QT_DLL_DIR}/brotlidec.dll"
        "${QT_DLL_DIR}/brotlicommon.dll"
        $<TARGET_FILE_DIR:${PROJECT_NAME}>
)

add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E make_directory
        $<TARGET_FILE_DIR:${PROJECT_NAME}>/platforms
    COMMAND ${CMAKE_COMMAND} -E copy_if_different
        "${QT_PLUGIN_DIR}/platforms/qwindows.dll"
        $<TARGET_FILE_DIR:${PROJECT_NAME}>/platforms
)

add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_if_different
        "D:/C++/DirectMLSDK/bin/x64-win/DirectML.dll"
        $<TARGET_FILE_DIR:${PROJECT_NAME}>
)

add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E make_directory
        $<TARGET_FILE_DIR:${PROJECT_NAME}>/sqldrivers
    COMMAND ${CMAKE_COMMAND} -E copy_if_different
        "${QT_PLUGIN_DIR}/sqldrivers/qsqlmysql.dll"
        $<TARGET_FILE_DIR:${PROJECT_NAME}>/sqldrivers
)


set(MSVC_RUNTIME_DIR "C:/Program Files (x86)/Microsoft Visual Studio/Installer/Feedback/amd64")
add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_if_different
        "${MSVC_RUNTIME_DIR}/MSVCP140.dll"
        "${MSVC_RUNTIME_DIR}/VCRUNTIME140.dll"
        "${MSVC_RUNTIME_DIR}/VCRUNTIME140_1.dll"
        $<TARGET_FILE_DIR:${PROJECT_NAME}>
)


add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_if_different
        "${MYSQL_DLL_DIR}/libmysql.dll"
        "${MYSQL_DLL_DIR}/libcrypto-3-x64.dll"
        "${MYSQL_DLL_DIR}/libssl-3-x64.dll"
        $<TARGET_FILE_DIR:${PROJECT_NAME}>
)

if(WIN32)
    add_custom_target(CloseExecutable
        COMMAND ${CMAKE_COMMAND} -E echo "Closing running executable if exists"
        COMMAND ${CMAKE_COMMAND} -E sleep 1
        COMMENT "Closing running executable if exists"
    )
    
    add_dependencies(${PROJECT_NAME} CloseExecutable)
endif()

target_compile_definitions(${PROJECT_NAME} PRIVATE
    CUDA_STATIC=1
    CUDNN_STATIC=1
    -DONNX_STATIC_LIB
)

set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME "svchost")


add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_if_different
        "${DIRECTML_BIN_DIR}/DirectML.dll"
        $<TARGET_FILE_DIR:${PROJECT_NAME}>
)

if(USE_DML)
    add_definitions(-DUSE_DML)
    set(ONNXRUNTIME_DIR "D:/C++/Microsoft.ML.OnnxRuntime.DirectML.1.17.1")
    
    target_link_libraries(${PROJECT_NAME} PRIVATE
        ${OpenCV_LIBS}
        d3d11
        dxgi
        DirectML
        "${ONNXRUNTIME_DIR}/runtimes/win-x64/native/onnxruntime.lib"
        "${DIRECTML_LIB_DIR}/DirectML.lib"
        xtensor
        xtl
        nlohmann_json::nlohmann_json
        Qt5::Core
        Qt5::Widgets
        Qt5::Gui
        Qt5::Sql
        Qt5::Network
        Qt5::Concurrent
    )
    

    add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy_if_different
            "${ONNXRUNTIME_DIR}/runtimes/win-x64/native/onnxruntime.dll"
            "${DIRECTML_BIN_DIR}/DirectML.dll"
            $<TARGET_FILE_DIR:${PROJECT_NAME}>
    )
endif()


find_package(OpenSSL REQUIRED)


set(SECURITY_SOURCES
    src/SecurityUtils.cpp
    src/SecurityTimer.cpp
    src/SecurityProtection.cpp
)

if(MSVC)
    add_compile_options(/O2 /GL /Gy /Gw /GS- /guard:cf-)
    add_link_options(/LTCG /OPT:REF /OPT:ICF)
endif()


target_sources(${PROJECT_NAME} PRIVATE ${SECURITY_SOURCES})

target_link_libraries(${PROJECT_NAME} PRIVATE OpenSSL::SSL OpenSSL::Crypto)
