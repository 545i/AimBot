一用流程
一用流程
1. 使用OpenDevice OpenDeviceByID
 2. 使用SetEncrypt加（可）
3. 使用GetVersion 取件版本，使用GetModel 取号（可）
4. 使用GetChipID 取列号，用于判断是否（果有的）
5. 用鼠标、盘相关制令
6. 使用Close关与的
2022@叛术作 All right reserved
OpenDevice
作用
到默VID/PID的
格
值=OpenDevice()
参数
无
值
果未插入未上，0。检测到1。
其他明
单机版
用示例
盘使用。双机版看另一个OpenDevice
经改VID/PID的，使用OpenDeviceByID。
int ret=km.OpenDevice();
 if(!ret){
 MessageBox("插入！");
 }
2022@叛术作 All right reserved
 
OpenDeviceByID ID
作用
到任VID/PID的VID/PID的
格
值=OpenDeviceByID(short vid,short pid)
 
参数
1. vid：16位数字，0x1234
 2. pid：16位数字，0x5678
 
值
果未插入未上，0。检测到1。
 
其他明
1、果是修改PID VID的，使用此函数。
2、果pid vid为0，么可以上任修改了pid vid
的。
3、果pid vid为0不上，可是有其他的
，使用的vid pid。
 
用示例
int ret=km.OpenDeviceByID(0,0);
 if(!ret){
 MessageBox("插入！");
 }
 2022@叛术作 All right reserved
OpenDevice
作用
（双机版专用）
到双机版
格
值=OpenDevice(string 串口号)
参数
双机版主端串口号，COM3
值
果未插入未上，0。检测到1。
其他明
双机版
个OpenDevice
用示例
双机Pro使用。单机版
盘看另一
int ret=km.OpenDevice("COM3");
 if(!ret){
 MessageBox("插入！");
 }
2023@叛术作 All right reserved
Close关
作用
断与的
格
Close()
参数
无
值
无
其他明
用Dll时，关后，dll卸
用示例
km.Close();
 2022@叛术作 All right reserved
Reboot
作用
格
Reboot()
参数
无
值
无
用示例
km.Reboot();
 2022@叛术作 All right reserved
GetVersion取版本号
作用
取
格
件版本号
值=GetVersion()
参数
无
值
1-255，代件版本号
用示例
int version=km.GetVersion();
 printf("
版本号为:%d\n",version);
 2022@叛术作 All right reserved
GetModel取
作用
号
取
格
号
值=GetModel()
参数
无
值
1-255，代
用示例
号，其中1=A，2=B，以此类
int model=km.Model();
 printf("
号为:%c\n",model+'A'-1);
 2022@叛术作 All right reserved
IsOpen
作用
是否
取前状
格
值=IsOpen()
参数
无
值
1= 
其他明
0=断
有动作应确保
用示例
状下
if(!km.IsOpen()){
 MessageBox("先
}
 }
！");
 2022@叛术作 All right reserved
GetChipID取
作用
列号
取
格
列号
值=GetChipID()
参数
无
值
32位整数，可是数
其他明
令取的列号全球一，可用于用加验
用示例
long id=km.GetChipID();
 if(id!=1234567){
 MessageBox("
 }
，无法！");
 2022@叛术作 All right reserved
GetStorageSize取储存空
作用
取存储空
格
值=GetStorageSize()
参数
无
值
32位整数。不同版本不同，精简版为0
其他明
写义写入的程，写入前判断
用示例
long size=km.GetStorageSize();
 printf("存储空
为:%ld\n",size);
 2022@叛术作 All right reserved
SetWaitRespon鼠_令等
作用
硬件是同步模还是步模
格
SetWaitRespon(wait)
参数
1. wait：1=同步模，0= 步模
值
无
其他明
1、35版，2代有默用步用的方，即发
鼠标盘令后，不功的消。同时有256级的令
列，可以一次发
令，依次
理。
2、用这个函数同步模后，发鼠标盘令，等硬件
的信号函数会
。
3、使用景：确鼠标盘令再的时候，
MoveD MoveRD时无法确。
4、默为步的状。
用示例
km.SetWaitRespon(1);
 2023@叛术作 All right reserved
GetConfigData取
作用
区数
取区数（鼠专用函数）
格
short data=GetConfigData(int index)
参数
1. index：区号，0-251
值
16位整数：前用SetConfigData存入的数
其他明
函数可用于存储一些参数，
用示例
参数加参数
km.SetConfigData(0,12345);
 short data=km.GetConfigData(0);
 printf("0号位数为:%d\n",data);
 2022@叛术作 All right reserved
SetConfigData
作用
区
区数（鼠专用函数）
格
SetConfigData(int index,short data)
参数
1. index：区号，0-251
 2. data：16位整数
值
功0，1
其他明
函数可用于存储一些参数，
用示例
参数加参数
km.SetConfigData(0,12345);
 short data=km.GetConfigData(0);
 printf("0号位数为:%d\n",data);
 2022@叛术作 All right reserved
SetLed LED灯
作用
制电板上的示灯亮灭（鼠专用函数）
格
SetLed(BOOL on)
参数
1. on：1 0，1代，0代关
值
功0，1
其他明
鼠标盘插上后，示灯动亮。后可以程更改
亮灭，到一的信提作用（不会改变插入鼠标盘的别
状）。
用示例
for(int i=0;i<10;++i){
 km.SetLed(i%2);
 Sleep(500);
 }
2022@叛术作 All right reserved
SetEncrypt加数
作用
USB信加一加（鼠专用函数）
格
SetEncrypt(BYTE* dat)
参数
1. dat：11字的数组，用于加
2. dat为NULL时，清加
值
功0，1
其他明
函数可以时用，修改为不同的加。
用加的方，可以一程加全。
用示例
BYTE 
dat[11]=
 {0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x99,0xaa,0xbb};
 km.SetEncrypt(dat);
 2022@叛术作 All right reserved
Set_Freq
作用
数比例
数比例，低鼠标dpi。
格
Set_Freq(数比例)
参数
1. 保留的数比例，可0-100，单位为百分比
值
无
其他明
参数为0-100，代保留的百分比。于100%，么会丢
分鼠标移动的，相于低鼠标的dpi。1%代仅留下1%
的，相于dpi低99%。 
勿
用示例
于100的数，会鼠标无法移动。
km.Set_Freq(50)
 2022@叛术作 All right reserved
Get_Freq取数比例
作用
取数比例值。
格
果=Get_Freq()
参数
无
值
数比例，0-100
其他明
数保留的比例，Set_Freq
用示例
f=km.Get_Freq()
 2022@叛术作 All right reserved
MiddleDown鼠标_住中
作用
下中
格
MiddleDown()
参数
无
值
无
用示例
km.MiddleDown();
 2022@叛术作 All right reserved
MiddleUp鼠标_
作用
中
中
格
MiddleUp()
参数
无
值
无
用示例
km.MiddleUp();
 2022@叛术作 All right reserved
MiddleClick鼠标_中单击
作用
单击中
格
MiddleClick(int min,int max)
参数
1. min：下之时的最值
2. max：下之时的最值
3. max等于0时，时为min值
4. min max 等于0时，不时
值
无
其他明
中单击=下中+机时+中
用示例
km.MiddleClick(50,120);
 2022@叛术作 All right reserved
MoveTo鼠标_移动
作用
移动鼠标到某个特的标点
格
MoveTo(ushort x,ushort y)
参数
1. x：16位整数，标
2. y：16位整数，标
值
无
其他明
函数动以前的分率为参照移动。环下
可会出现。
可：
①移动到的位不等于标。
②只第一个移动。
用示例
km.MoveTo(100,200);
2022@叛术作 All right reserved
MoveR鼠标_相移动
作用
鼠标相前位移动一的离
格
MoveR(short dx,short dy)
参数
1. dx：
2. dy：
值-32768到32767-32768到32767
无
其他明
函数移动的数等于变化的标值，制板
>鼠标取消“提高鼠标精确”。
用示例
km.MoveR(100,0);
 km.MoveR(0,100);
 km.MoveR(-100,0);
 km.MoveR(0,-100);
2022@叛术作 All right reserved
MoveRD鼠标_相
作用
移动
使用二次
格
曲线相移动鼠标
MoveRD(short dx,short dy,byte delay,byte delta)
参数
1. dx：16位整数，横向移动数
2. dy：16位整数，纵向移动数
3. delay：8位整数，移动两个移动动作之的时，单位毫秒
4. delta：8位整数，移动点，
值
无
用示例
km.MoveRD(100,0,8,10);
 km.MoveRD(0,100,8,10);
 km.MoveRD(-100,0,8,10);
 km.MoveRD(0,-100,8,10);
 2023@叛术作 All right reserved
MouseButtonDown鼠标_
作用
下
下鼠标任
格
MouseButtonDown(byte index)
参数
1. 鼠标号，1-8，分别代
侧5。
值
、右、中、侧1、侧2、侧3、侧4、
无
用示例
km.MouseButtonDown(4);//下侧1
 2024@叛术作 All right reserved
MouseButtonUp鼠标_
作用
鼠标任
格
MouseButtonUp(byte index)
参数
1. 鼠标号，1-8，分别代
侧5。
值
、右、中、侧1、侧2、侧3、侧4、
无
用示例
km.MouseButtonUp(4);//
侧1
 2024@叛术作 All right reserved
MouseButtonClick鼠标_单击
作用
下
格
鼠标任
MouseButtonClick(byte index,int min,int max)
参数
1. 鼠标号，1-8，分别代
、右、中、侧1、侧2、侧3、侧4、
侧5。
2. min：下之时的最值
3. max：下之时的最值
值
无
用示例
km.MouseButtonClick(4,0,0);//
点击侧1
 2024@叛术作 All right reserved
CombineMoveR鼠标合
作用
动合后，鼠标动作
制变为参数
的值。
为10，么，鼠标动作最10毫秒发到电一次。期，果
有个鼠标相移动动作，会合。动作包插
后的鼠标移动、本的鼠标相移动、用的鼠标相
移动。
格
CombineMoveR(
参数
)
 1. ：0=关合 ，其他值(1-255)= 动合，参数单位为毫秒
值
无
其他明
用示例
合，模为125hz率的鼠标：CombineMoveR 8
束合：CombineMoveR 0
2024@叛术作 All right reserved
KeyDownName盘_住
作用
下盘
格
KeyDownName(char* keyname)
参数
1. keyname：名，清单 
值
清单
无
用示例
km.KeyDownName("F1");
 2022@叛术作 All right reserved
KeyUpName盘_
作用
盘
格
KeyUpName(char* keyname)
参数
1. keyname：名，清单 
值
清单
无
用示例
km.KeyUpName("F1");
 2022@叛术作 All right reserved
KeyPressName盘_
作用
下
格
盘
KeyPressName(char* keyname,int min,int max)
参数
1. keyname：名，清单 清单
2. min：下之时的最值
3. max：下之时的最值
4. max等于0时，时为min值
5. min max 等于0时，不时
值
无
用示例
km.KeyPressName("F1");
 2022@叛术作 All right reserved
KeyDownCode盘_住C
作用
以盘码下盘（最）
格
KeyDownCode(byte keycode)
参数
1. keycode：码，清单 
值
清单
无
用示例
km.KeyDownCode(4);//下A
 2022@叛术作 All right reserved
KeyUpCode盘_ C
作用
以盘码盘（最）
格
KeyUpCode(byte keycode)
参数
1. keycode：码，清单 
值
清单
无
用示例
km.KeyUpCode(4);//
 A
 2022@叛术作 All right reserved
KeyPressCode盘_ C
作用
以盘码下盘（最）
格
KeyPressCode(byte keycode,int min,int max)
参数
1. keycode：码，清单 
2. min：下之时的最值
3. max：下之时的最值
4. max等于0时，时为min值
5. min max 等于0时，不时
值
清单
无
用示例
km.KeyPressCode(4,50,120);//一下A
 2022@叛术作 All right reserved
KeyDownVirtualCode
作用
盘_住
以
格
码下盘
KeyDownVirtualCode(byte keycode)
参数
1. keycode：码，清单 
值
清单
无
其他明
函数
，最
用示例
码为名后再化为盘码
km.KeyDownVirtualCode(65);//下A
 2022@叛术作 All right reserved
KeyUpVirtualCode
作用
盘_
以
格
码
盘
KeyUpVirtualCode(byte keycode)
参数
1. keycode：码，清单 
值
清单
无
其他明
函数
，最
用示例
码为名后再化为盘码
km.KeyUpVirtualCode(65);//下A
 2022@叛术作 All right reserved
KeyPressVirtualCode
作用
盘_
以
格
码下盘
KeyPressVirtualCode(byte keycode,int min,int max)
参数
1. keycode：码，清单 
2. min：下之时的最值
3. max：下之时的最值
4. max等于0时，时为min值
5. min max 等于0时，不时
值
清单
无
其他明
函数
，最
用示例
码为名后再化为盘码
km.KeyPressVirtualCode(65,50,120);//下
A
2022@叛术作 All right reserved
KeyAllup盘_全
作用
盘有
格
KeyAllup()
参数
无
值
无
用示例
km.KeyAllup();
 2022@叛术作 All right reserved
SayString盘_入文本
作用
盘直入一个字符串
格
SayString(char* str,int min,int max)
参数
1. str：字符串，不含有中文
2. min：下之、之时的最值
3. max：下之、之时的最值
4. max等于0时，时为min值
5. min max 等于0时，不时
值
无
其他明
1、函数只入盘直入的字符串，不入中文。
2、会动shift入。
用示例
km.SayString("1234abCD!@");
2022@叛术作 All right reserved
SayStringAnsi盘_入文本Ansi
作用
使用机内码入一个ANSI码的字符串
格
SayStringAnsi(char* str,int min,int max)
参数
1. str：字符串，可以含有中文
2. min：下之、之时的最值
3. max：下之、之时的最值
4. max等于0时，时为min值
5. min max 等于0时，不时
值
无
其他明
1、函数模住Alt加盘入数字来入文字。
2、函数可以入中文。
3、Ansi Unicode的区别于入目标的况，信、QQ等
件为Unicode，事本为Ansi，其他件两个函数测一
下。
4、游界无法使用函数入。
用示例
km.SayStringAnsi("1234测中文入!@");
 2022@叛术作 All right reserved
SayStringUnicode盘_入文本Unicode
作用
使用机内码入一个Unicode码的字符串
格
SayStringUnicode(char* str,int min,int max)
参数
1. str：字符串，可以含有中文
2. min：下之、之时的最值
3. max：下之、之时的最值
4. max等于0时，时为min值
5. min max 等于0时，不时
值
无
其他明
1、函数模住Alt加盘入数字来入文字。
2、函数可以入中文。
3、Ansi Unicode的区别于入目标的况，信、QQ等
件为Unicode，事本为Ansi，其他件两个函数测一
下。
4、游界无法使用函数入。
用示例
km.SayStringUnicode("1234测中文入!@");
 2022@叛术作 All right reserved
Lock_KeyBoard盘_
作用
盘的动作（鼠
格
盘可用）
Lock_KeyBoard(byte option)
参数
option：
0=取消盘
255=
其他值=
值
有盘动作
功1，0
其他明
1、
盘动作的是：插硬件上的盘动作
略，不作用
2、后程本制的动作不受。
3、可以次用，每次累加清单。取消时全清
空。
4、值写码
用示例
km.Lock_KeyBoard(44);//
空格
2023@叛术作 All right reserved
Notify_KeyBoard盘_动作知
作用
插硬件上的盘的动作，知主机（鼠专用函
数）
格
Notify_KeyBoard(byte option)
参数
option：
0=取消盘
1=
盘
值
功1，0
其他明
1、
盘动作的是：插硬件上的盘的
，发主机，可由程使用Read_Notify函数取
2、后仍然可以
3、
动作
后，不其他鼠标盘操作的函数用，
用，先停止。
用示例
km.Notify_KeyBoard(1);//
盘动作
2023@叛术作 All right reserved
Read_Notify鼠_动作知
作用
使用Notify_Mouse Notify_KeyBoard函数
后，用函数取的数
格
值=Read_Notify(byte* buf,int timeout)
鼠标盘动作
参数
1. buf：存储数的数组，保
2. timeout：时时。为-1为
位毫秒）
值
5字
取，0为不，其他正数为等时（单
取到数，取到数的。未取到数（
时），0
其他明
1、另一个线程专用于取数。
2、
后，不其他鼠标盘操作的函数用，
用，先停止、停止取数。
3、取的数格：--
取鼠标数时
字0：令，等于Notify_Mouse的参数
剩余数：
 ①、右、中数：字1：1=下 0=
 ②鼠标有：字1=鼠标号(4-8) 字2：1=下 0=
 ③鼠标移动：字1字2：X方向移动的数字，端 字3字
4：Y方向移动的数字，端
 ④鼠标滚：字1=滚数值
 --取盘数时
 字0：64
 字1：的码
 字2：下1，0
 4、数格为杂，参示例源码
 
用示例
BYTE buf[5];
 while(1){
     int len=km.Read_Notify(buf,-1);
     if(len>0){
         BYTE cmd=buf[0];
         //理的数
         if(cmd==1){
             ......
         }else if(cmd==2){
             ......
         }
     }
 }
 
2022@叛术作 All right reserved
GetKeyState取状
作用
取插入
格
的状（盘鼠标可）
state=GetKeyState(
参数
码)
 1. 码
值
1：下
0：
其他明
1、令是取前状的，时时取，不另一个
线程。不同于Read_Notify这种知
2、使用令，停止Read_Notify，否则易卡住
3、不
取
4、函数名与系函数相同，动库用时，函数名应写作
DllGetKeyState
用示例
state=GetKeyState(1)//取
是否下
2023@叛术作 All right reserved